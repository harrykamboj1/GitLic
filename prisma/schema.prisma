generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    imageUrl  String?
    firstName String?
    lastName  String?

    emailAddresses String @unique

    credits        Int             @default(150)
    UserToProject  UserToProject[]
    questionsAsked Question[]
}

model Project {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name                String
    githubUrl           String
    deletedAt           DateTime?
    UserToProject       UserToProject[]
    Commit              Commit[]
    SourceCodeEmbedding SourceCodeEmbedding[]
    savedQuestions      Question[]
    Meeting             Meeting[]
}

model UserToProject {
    id        String   @unique @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId    String
    projectId String

    user    User    @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    @@unique([userId, projectId])
}

model Commit {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    projectId          String
    project            Project @relation(fields: [projectId], references: [id])
    commitMessage      String
    commitHash         String
    commitAuthorName   String
    commitAuthorAvatar String
    commitDate         String

    summary String
}

model SourceCodeEmbedding {
    id               String                      @id @default(cuid())
    summaryEmbedding Unsupported("vector(768)")? // Because gemini model has 768 dimensions
    sourceCode       String
    fileName         String
    summary          String

    projectId String
    project   Project @relation(fields: [projectId], references: [id])
}

model Question {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    question String
    answer   String

    fileReferences Json?

    projectId String
    project   Project @relation(fields: [projectId], references: [id])

    userId String
    user   User   @relation(fields: [userId], references: [id])
}

model Meeting {
    id         String        @id @default(cuid())
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    name       String
    meetingUrl String
    projectId  String
    project    Project       @relation(fields: [projectId], references: [id])
    status     MeetingStatus @default(PROCESSING)
    Issues     Issues[]
}

model Issues {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    start    String
    end      String
    gist     String
    headline String
    summary  String

    meetingId String
    meeting   Meeting @relation(fields: [meetingId], references: [id])
}

enum MeetingStatus {
    PROCESSING
    COMPLETED
}
